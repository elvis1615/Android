package com.black.elvis1615.hola1.graficar;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 04 17:45:37 CST 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 04 17:45:37 CST 2015
  */
public class parser1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\005\014" +
    "\000\002\005\014\000\002\005\016\000\002\005\016\000" +
    "\002\005\020\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\005\000\002\006\006\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\013\007\001\002\000\006\002\ufffe\013" +
    "\007\001\002\000\004\002\133\001\002\000\004\002\000" +
    "\001\002\000\014\014\010\015\011\016\015\017\013\020" +
    "\014\001\002\000\004\010\122\001\002\000\004\010\111" +
    "\001\002\000\006\002\ufffd\013\ufffd\001\002\000\004\010" +
    "\074\001\002\000\004\010\061\001\002\000\004\010\016" +
    "\001\002\000\010\005\020\010\021\031\017\001\002\000" +
    "\016\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\001\002\000\004\010\056\001\002\000\010\005\020\010" +
    "\021\031\017\001\002\000\014\004\024\005\025\006\023" +
    "\007\027\012\026\001\002\000\010\005\020\010\021\031" +
    "\017\001\002\000\010\005\020\010\021\031\017\001\002" +
    "\000\010\005\020\010\021\031\017\001\002\000\010\005" +
    "\020\010\021\031\017\001\002\000\010\005\020\010\021" +
    "\031\017\001\002\000\016\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\012\ufff4\001\002\000\014\004\024\005\025" +
    "\006\023\007\027\012\032\001\002\000\010\005\020\010" +
    "\021\031\017\001\002\000\014\004\024\005\025\006\023" +
    "\007\027\012\034\001\002\000\010\005\020\010\021\031" +
    "\017\001\002\000\014\004\024\005\025\006\023\007\027" +
    "\012\036\001\002\000\022\021\044\022\043\023\047\024" +
    "\040\025\045\026\042\027\041\030\046\001\002\000\004" +
    "\011\050\001\002\000\004\011\uffed\001\002\000\004\011" +
    "\uffea\001\002\000\004\011\uffeb\001\002\000\004\011\uffef" +
    "\001\002\000\004\011\ufff0\001\002\000\004\011\uffec\001" +
    "\002\000\004\011\uffe9\001\002\000\004\011\uffee\001\002" +
    "\000\006\002\ufffa\013\ufffa\001\002\000\016\004\ufff6\005" +
    "\ufff6\006\023\007\027\011\ufff6\012\ufff6\001\002\000\016" +
    "\004\ufff7\005\ufff7\006\023\007\027\011\ufff7\012\ufff7\001" +
    "\002\000\016\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\001\002\000\014\004\024\005\025\006\023\007" +
    "\027\011\055\001\002\000\016\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\001\002\000\010\005\020\010" +
    "\021\031\017\001\002\000\014\004\024\005\025\006\023" +
    "\007\027\011\060\001\002\000\016\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\001\002\000\010\005\020" +
    "\010\021\031\017\001\002\000\014\004\024\005\025\006" +
    "\023\007\027\012\063\001\002\000\010\005\020\010\021" +
    "\031\017\001\002\000\014\004\024\005\025\006\023\007" +
    "\027\012\065\001\002\000\010\005\020\010\021\031\017" +
    "\001\002\000\014\004\024\005\025\006\023\007\027\012" +
    "\067\001\002\000\010\005\020\010\021\031\017\001\002" +
    "\000\014\004\024\005\025\006\023\007\027\012\071\001" +
    "\002\000\022\021\044\022\043\023\047\024\040\025\045" +
    "\026\042\027\041\030\046\001\002\000\004\011\073\001" +
    "\002\000\006\002\ufff9\013\ufff9\001\002\000\010\005\020" +
    "\010\021\031\017\001\002\000\014\004\024\005\025\006" +
    "\023\007\027\012\076\001\002\000\010\005\020\010\021" +
    "\031\017\001\002\000\014\004\024\005\025\006\023\007" +
    "\027\012\100\001\002\000\010\005\020\010\021\031\017" +
    "\001\002\000\014\004\024\005\025\006\023\007\027\012" +
    "\102\001\002\000\010\005\020\010\021\031\017\001\002" +
    "\000\014\004\024\005\025\006\023\007\027\012\104\001" +
    "\002\000\010\005\020\010\021\031\017\001\002\000\014" +
    "\004\024\005\025\006\023\007\027\012\106\001\002\000" +
    "\022\021\044\022\043\023\047\024\040\025\045\026\042" +
    "\027\041\030\046\001\002\000\004\011\110\001\002\000" +
    "\006\002\ufff8\013\ufff8\001\002\000\010\005\020\010\021" +
    "\031\017\001\002\000\014\004\024\005\025\006\023\007" +
    "\027\012\113\001\002\000\010\005\020\010\021\031\017" +
    "\001\002\000\014\004\024\005\025\006\023\007\027\012" +
    "\115\001\002\000\010\005\020\010\021\031\017\001\002" +
    "\000\014\004\024\005\025\006\023\007\027\012\117\001" +
    "\002\000\022\021\044\022\043\023\047\024\040\025\045" +
    "\026\042\027\041\030\046\001\002\000\004\011\121\001" +
    "\002\000\006\002\ufffb\013\ufffb\001\002\000\010\005\020" +
    "\010\021\031\017\001\002\000\014\004\024\005\025\006" +
    "\023\007\027\012\124\001\002\000\010\005\020\010\021" +
    "\031\017\001\002\000\014\004\024\005\025\006\023\007" +
    "\027\012\126\001\002\000\010\005\020\010\021\031\017" +
    "\001\002\000\014\004\024\005\025\006\023\007\027\012" +
    "\130\001\002\000\022\021\044\022\043\023\047\024\040" +
    "\025\045\026\042\027\041\030\046\001\002\000\004\011" +
    "\132\001\002\000\006\002\ufffc\013\ufffc\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\010\002\004\003\005\004\003\001\001\000" +
    "\006\003\133\004\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\053\001\001" +
    "\000\002\001\001\000\004\006\052\001\001\000\004\006" +
    "\051\001\001\000\004\006\050\001\001\000\004\006\030" +
    "\001\001\000\004\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\032\001\001\000\002\001\001" +
    "\000\004\006\034\001\001\000\002\001\001\000\004\007" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\061\001\001\000\002\001\001\000\004\006\063" +
    "\001\001\000\002\001\001\000\004\006\065\001\001\000" +
    "\002\001\001\000\004\006\067\001\001\000\002\001\001" +
    "\000\004\007\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\074\001\001\000\002\001\001\000\004" +
    "\006\076\001\001\000\002\001\001\000\004\006\100\001" +
    "\001\000\002\001\001\000\004\006\102\001\001\000\002" +
    "\001\001\000\004\006\104\001\001\000\002\001\001\000" +
    "\004\007\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\111\001\001\000\002\001\001\000\004\006" +
    "\113\001\001\000\002\001\001\000\004\006\115\001\001" +
    "\000\002\001\001\000\004\007\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\122\001\001\000\002" +
    "\001\001\000\004\006\124\001\001\000\002\001\001\000" +
    "\004\006\126\001\001\000\002\001\001\000\004\007\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
		Main.errores.add(new String("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido."));
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser1$actions {


//para codigo java

  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COLOR ::= negro 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+8;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COLOR ::= cafe 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+7;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COLOR ::= morado 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+6;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COLOR ::= naranja 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+5;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COLOR ::= amarillo 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+4;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COLOR ::= verde 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+3;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COLOR ::= rojo 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+2;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COLOR ::= azul 
            {
              Object RESULT =null;
		 
    
    	RESULT=""+1;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("COLOR",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= menos ParA E ParC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		   
	float h = -1*(Float.parseFloat(String.valueOf(a)));
    RESULT=a;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= ParA E ParC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		     
    RESULT=a;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		 
    
    RESULT=a;
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E div E 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    
    float h = Float.parseFloat(String.valueOf(d));
    float h1= Float.parseFloat(String.valueOf(b));
    float res=h/h1;
    RESULT= (res)+"";
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= E por E 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    
   	float h = Float.parseFloat(String.valueOf(d));
    float h1= Float.parseFloat(String.valueOf(b));
    float res=h*h1;
    RESULT= (res)+"";
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= E menos E 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    
    float h = Float.parseFloat(String.valueOf(d));
    float h1= Float.parseFloat(String.valueOf(b));
    float res=h-h1;
    RESULT= (res)+"";
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= E mas E 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    
    float h = Float.parseFloat(String.valueOf(d));
    float h1= Float.parseFloat(String.valueOf(b));
    float res=h+h1;
    RESULT= (res)+"";
	
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FIG ::= poligono ParA E coma E coma E coma E coma E coma COLOR ParC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-11)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
     RESULT=5+","+b+","+c+","+d+","+e+","+f+","+g;
     
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("FIG",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-13)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIG ::= linea ParA E coma E coma E coma E coma COLOR ParC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
     RESULT=4+","+b+","+c+","+d+","+e+","+f;
     
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("FIG",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-11)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FIG ::= rectangulo ParA E coma E coma E coma E coma COLOR ParC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
     RESULT=3+","+b+","+c+","+d+","+e+","+f;
     
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("FIG",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-11)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FIG ::= cuadrado ParA E coma E coma E coma COLOR ParC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
     RESULT=2+","+b+","+c+","+d+","+e;
     
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("FIG",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FIG ::= circulo ParA E coma E coma E coma COLOR ParC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
     RESULT=1+","+b+","+c+","+d+","+e;;
     
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("FIG",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-9)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= graficar FIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
   RESULT=a;
   
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GR ::= A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
   RESULT=a;
   String st=String.valueOf(RESULT);
   String[] n= st.split(",");
   
   if(n[0].equals("1")||n[0].equals("2"))
   {
   	Main.objetos.add(new Circulo(Float.parseFloat(n[0]),Float.parseFloat(n[1]),Float.parseFloat(n[2]),Float.parseFloat(n[3]),Float.parseFloat(n[4])));
   }
   else if(n[0].equals("3")||n[0].equals("4"))
   {
   Main.objetos.add(new Circulo(Float.parseFloat(n[0]),Float.parseFloat(n[1]),Float.parseFloat(n[2]),Float.parseFloat(n[3]),Float.parseFloat(n[4]),Float.parseFloat(n[5])));
   }
   else if(n[0].equals("5m"))
   {
   Main.objetos.add(new Circulo(Float.parseFloat(n[0]),Float.parseFloat(n[1]),Float.parseFloat(n[2]),Float.parseFloat(n[3]),Float.parseFloat(n[4]),Float.parseFloat(n[5]),Float.parseFloat(n[5])));
   }
   
   
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GR ::= A GR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
   RESULT=a+"\n"+b;
   
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= GR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
   RESULT=a;
   System.out.println(a);
   
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

